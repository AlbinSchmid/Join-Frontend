import { CommonModule } from '@angular/common';
import { Component, inject, output } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { ApiService } from '../../../shared/services/api.service';
import { MatButtonModule } from '@angular/material/button';
import { log } from 'console';
import { DashboardService } from '../../../shared/services/dashboard.service';


@Component({
  selector: 'app-add-contact',
  imports: [
    MatIconModule,
    MatButtonModule,
    FormsModule,
    CommonModule
  ],
  templateUrl: './contact-form.component.html',
  styleUrl: './contact-form.component.scss',
  standalone: true
})
export class ContactFormComponent {
  dashboardService = inject(DashboardService);
  apiService = inject(ApiService);
  dialogRef = inject(MatDialogRef<ContactFormComponent>);
  data = inject<any>(MAT_DIALOG_DATA);
  formData = {
    nameContact: '',
    emailContact: '',
    phoneContact: '',
  }


  /**
   * Initialize the component.
   * 
   * If the component has received data from the parent component, it will
   * initialize the form with the data from the parent component. Otherwise,
   * it will initialize the form with empty values.
   */
  ngOnInit(): void {
    if (this.data.length > 1) {
      this.formData.nameContact = this.data[1].name
      this.formData.emailContact = this.data[1].email
      this.formData.phoneContact = this.data[1].phone
    }
  }


  /**
   * Closes the dialog with an 'add' action.
   * 
   * This method will be called when the user clicks the cancel button in the dialog.
   * It will close the dialog and pass the 'add' action to the parent component.
   */
  closeDialog(): void {
    this.dialogRef.close('add');
  }


  /**
   * Deletes the current contact.
   * 
   * This method deletes the contact by sending a request to the API with the contact ID.
   * It then filters the contact out from the local contacts list and closes the dialog
   * with a 'delete' action.
   */
  deleteContact(): void {
    let data = { id: this.data[1].id }
    this.apiService.deleteContactData(data);
    this.apiService.contacts = this.apiService.contacts.filter((contact) => contact.id !== this.data[1].id);
    this.dialogRef.close('delete');
  }


  /**
   * Creates a random color.
   * 
   * This function creates a random color in the hexadecimal format.
   * The color is generated by selecting a random letter from the string '0123456789ABCDEF'
   * and appending it to the color string. This is done 6 times to create a 6-digit
   * hexadecimal color.
   * 
   * @returns {string} A random color in hexadecimal format.
   */
  createRandomColor(): string {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }


  /**
   * Creates a new contact and adds it to the contacts list.
   * 
   * @summary Creates a new contact.
   * 
   * This function creates a new contact based on the input data in the form.
   * It first prepares a data object with the contact's name, email, phone number,
   * the user's ID, and a random color. Then, it sends a post request to the
   * server to create the contact. If the request is successful, it adds the
   * contact to the contacts list, reloads the contacts, sorts them, and closes
   * the dialog. If the request fails, it logs the error to the console.
   */
  createContact(): void {
    const data = {
      "name": this.formData.nameContact,
      "email": this.formData.emailContact,
      "phone": this.formData.phoneContact === null ? this.formData.phoneContact = '' : this.formData.phoneContact,
      "user_id": this.apiService.user.userId,
      "color": this.createRandomColor()
    }
    this.apiService.postRequest(data, 'contact').subscribe((response) => {
      this.apiService.contacts.push(response);
      this.apiService.relaodContact(),
      this.apiService.sortContacts();
      this.closeDialog();
    }, (error) => {
      console.error(error);
    })
  }


  /**
   * Updates the contact information.
   * 
   * This function prepares the updated contact data, including the contact's
   * ID, name, email, and phone number, and sends a patch request to update
   * the contact in the database. If the phone number is null, it defaults to
   * an empty string. After successfully sending the patch request, the dialog
   * is closed with an 'edit' action.
   */
  updateContact(): void {
    this.formData.phoneContact === null ? this.formData.phoneContact = '' : this.formData.phoneContact;
    const data = {
      'id': this.data[1].id,
      'name': this.formData.nameContact,
      'email': this.formData.emailContact,
      'phone': this.formData.phoneContact
    }
    this.apiService.patchContactData(data);
    this.dialogRef.close('edit');
  }


  /**
   * Handles the form submission for adding a new contact.
   * 
   * @param ngForm - The form object containing the user's input.
   * 
   * The function first checks if the form is valid, submitted, and if the current
   * action is 'add'. If all conditions are met, it proceeds to create a new contact
   * using the provided data.
   */
  submitForm(ngForm: any): void {
    if (ngForm.valid && ngForm.submitted && this.data[0].form == 'add') {
      this.createContact();
    }
  }
}
